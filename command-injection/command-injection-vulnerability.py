import requests
from itertools import permutations
import re

def readFile(fileName):
  """Reads a file and returns a list of read lines
  Parameters:
  fileName (string) -- the name of the file (path and format included)
  """
  lines = []
  try:
    with open(fileName, 'r') as f:
      for line in f:
        lines.append(line.replace('\n', ''))
  except:
    raise Exception('File', urlsFile, 'doesn\'t exists')
  return lines

def getRequest(url, queryParams):
  if url:
    try:
      r = requests.get(url, params=queryParams)
      r.raise_for_status()
      return r
    except requests.exceptions.HTTPError as err:
      raise SystemExit(err)

def postRequest(url, postData):
  if url:
    try:
      r = requests.post(url, data=postData)
      r.raise_for_status()
      return r
    except requests.exceptions.HTTPError as err:
      raise SystemExit(err)

def isCommandInjection(command, output):
  if 'ls' in command:
    return 'find-escapeshellcmd.php' in output and 'ping-no-amp.php' in output and 'echo.php' in output
  elif 'whoami' in command:
    return 'www-data' in output and 'www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin' not in output
  elif 'cat /etc/passwd' in command:
    # check fist two lines of /etc/passwd
    return 'root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin' in output
  return False

httpString = 'http://'
host = input('Insert the host (default http://localhost): ')
if not host:
  host = 'http://localhost'
else:
  while not host.startswith(httpString) or len(host) <= len(httpString):
    host = input('Host not valid.\nInsert a valid host (ex. http://localhost): ')

urlsFile = input('Insert the URLs file name (default urls.txt): ')
if not urlsFile:
  urlsFile = 'urls.txt'
payloadsFile = input('Insert the payloads file name (default payloads.txt): ')
if not payloadsFile:
  payloadsFile = 'payloads.txt'

urls = readFile(urlsFile)
payloads = readFile(payloadsFile)

# Expected url format: /some/random/url/with-page.php:param1,param2,param3
for url in urls:
  splitted = url.split(':')
  if len(splitted) == 3:
    httpMethod = splitted[0]
    baseUrl = splitted[1]
    params = splitted[2]
    paramsList = params.split(',')
    paramsListLen = len(paramsList)
    payloadsLen = len(payloads)

    if payloadsLen >= paramsListLen:
      permuts = list(permutations(range(payloadsLen), paramsListLen))
      for permut in permuts:
        requestData = {}
        j = 0
        for index in permut:
          payload = payloads[index]
          requestData[paramsList[j]] = payload
          j += 1

        result = {}
        if httpMethod == 'GET':
          result = getRequest(host + baseUrl, requestData)
        elif httpMethod == 'POST':
          result = postRequest(host + baseUrl, requestData)

        if result.ok and result.text:
          for param in paramsList:
            payload = requestData[param]
            if isCommandInjection(payload, result.text):
              print('Found a command injection on the "' + param + '" parameter in the "' + url + '" url using the "' + payload + '" payload')
    else:
      raise Exception('The number of parameters in "' + url +'" is greater than the number of possible payloads')
